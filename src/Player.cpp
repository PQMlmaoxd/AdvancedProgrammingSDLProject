#include "Player.h"
#include <iostream>
#include <fstream>
#include <SDL_image.h>
#include <SDL_ttf.h> // üîπ ƒê·∫£m b·∫£o s·ª≠ d·ª•ng SDL_ttf ƒë·ªÉ hi·ªÉn th·ªã ch·ªØ
#include "Maze.h" 
#include <sstream>
#include <filesystem>
namespace fs = std::filesystem;


Player::Player(SDL_Renderer* renderer, Maze& maze) : renderer(renderer) {
    if (!loadPosition("save.txt")) { 
        rect = {maze.getStartX(), maze.getStartY(), 32, 32};
    }
    loadKeybinds();
    loadTexture();
}

Player::Player(int x, int y, SDL_Renderer* renderer) : renderer(renderer) {
    lastFrameTime = SDL_GetTicks();
    rect = {x, y, 32, 32};
    speed = 275;
    loadKeybinds();
    loadTexture();
}

void Player::handleInput(const Uint8* keys, const Maze& maze) {
    // T√≠nh delta time (th·ªùi gian gi·ªØa 2 frame)
    Uint32 currentTime = SDL_GetTicks();
    float deltaTime = (currentTime - lastFrameTime) / 1000.0f;
    lastFrameTime = currentTime;

    SDL_Rect newPos = rect;
    int moveX = 0;
    int moveY = 0;

    // Ki·ªÉm tra tr·∫°ng th√°i ph√≠m ƒë·ªÉ x√°c ƒë·ªãnh h∆∞·ªõng di chuy·ªÉn
    if (keybinds.count("left") && keys[SDL_GetScancodeFromKey(keybinds["left"])]) {
        moveX = -1;
        currentTexture = textureSide;
        facingRight = false;
    }
    if (keybinds.count("right") && keys[SDL_GetScancodeFromKey(keybinds["right"])]) {
        moveX = 1;
        currentTexture = textureSide;
        facingRight = true;
    }
    if (keybinds.count("up") && keys[SDL_GetScancodeFromKey(keybinds["up"])]) {
        moveY = -1;
        currentTexture = textureUp;
    }
    if (keybinds.count("down") && keys[SDL_GetScancodeFromKey(keybinds["down"])]) {
        moveY = 1;
        currentTexture = textureDown;
    }

    // C·∫≠p nh·∫≠t v·ªã tr√≠ d·ª±a tr√™n t·ªëc ƒë·ªô v√† deltaTime (v√≠ d·ª• speed = 200 pixel/gi√¢y)
    newPos.x += static_cast<int>(moveX * speed * deltaTime);
    newPos.y += static_cast<int>(moveY * speed * deltaTime);

    if (!maze.checkCollision(newPos)) {
        // Ch·ªâ c·∫≠p nh·∫≠t n·∫øu v·ªã tr√≠ thay ƒë·ªïi
        if (newPos.x != rect.x || newPos.y != rect.y) {
            rect = newPos;
            // Ch·ªâ l∆∞u v·ªã tr√≠ sau m·ªói 500ms thay ƒë·ªïi, tr√°nh l∆∞u li√™n t·ª•c m·ªói frame
            static Uint32 lastSaveTime = 0;
            if (currentTime - lastSaveTime >= 500) {
                savePosition("save.txt");
                lastSaveTime = currentTime;
            }
        }
    }
}

void Player::update(Maze& maze, SDL_Renderer* renderer) {
    // C·∫≠p nh·∫≠t th·ªùi gian ch∆°i d·ª±a tr√™n startTime
    setPlayTime(SDL_GetTicks() - startTime);

    // Ki·ªÉm tra va ch·∫°m v·ªõi key (ch·ªâ khi player ch∆∞a c√≥ key)
    if (!hasKey() && maze.checkKeyCollision(rect)) {
        collectKey();       // ƒê√°nh d·∫•u player ƒë√£ thu th·∫≠p key
        maze.unlockDoor();    // M·ªü kh√≥a c·ª≠a exit
        std::cout << "Key collected!" << std::endl;
    }

    // Ki·ªÉm tra va ch·∫°m v·ªõi c·ªïng exit, v√† ch·ªâ x·ª≠ l√Ω m·ªôt l·∫ßn khi th·∫Øng
    SDL_Rect goalRect = { maze.getGoalX(), maze.getGoalY(), tileSize, tileSize };
    if (SDL_HasIntersection(&rect, &goalRect) && !winProcessed) {
        if (!hasKey()) {
            std::cout << "Exit is locked. You need a key to exit!" << std::endl;
        }
        else {
            // C·∫≠p nh·∫≠t Best Time ngay khi player ch·∫°m exit
            Uint32 currentPlayTime = getPlayTime();
            Uint32 bestTime = 0;
            std::ifstream bestTimeFile("Save/time/best_time.txt");
            if (bestTimeFile.is_open()) {
                bestTimeFile >> bestTime;
                bestTimeFile.close();
            }
            std::cout << "Current play time: " << currentPlayTime << " ms, Best time: " << bestTime << " ms" << std::endl;
            if (bestTime == 0 || currentPlayTime < bestTime) {
                fs::create_directories("Save/time");  // T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
                std::ofstream outFile("Save/time/best_time.txt");
                if (outFile.is_open()) {
                    outFile << currentPlayTime;
                    outFile.close();
                    std::cout << "New best time saved: " << currentPlayTime << " ms" << std::endl;
                }
                else {
                    std::cerr << "Failed to open Save/time/best_time.txt for writing!" << std::endl;
                }
            }
            winProcessed = true;  // ƒê√°nh d·∫•u r·∫±ng ƒë√£ x·ª≠ l√Ω th·∫Øng

            int result = showWinScreen(renderer);
            if (result == -2) {  // N·∫øu ch·ªçn "Menu", ƒë√°nh d·∫•u ƒë·ªÉ quay l·∫°i menu ch√≠nh
                returnToMenu = true;
            }
            else if (result == -1) { // N·∫øu ch·ªçn "Tho√°t game"
                SDL_Quit();
                exit(0);
            }
        }
    }
}

int Player::showWinScreen(SDL_Renderer* renderer) {
    bool choosing = true;
    int selectedOption = 0;
    SDL_Event e;

    // ƒê·ªçc record th·ªùi gian t·ª´ file "Save/time/best_time.txt"
    Uint32 bestTime = 0;
    std::ifstream inFile("Save/time/best_time.txt");
    if (inFile.is_open()) {
        inFile >> bestTime;
        inFile.close();
    }

    std::ostringstream bestTimeMsg;
    if (bestTime > 0) {
        bestTimeMsg << "Best Time: " << bestTime << " ms";
    }
    else {
        bestTimeMsg << "Best Time: N/A";
    }

    // Load font
    TTF_Font* font = TTF_OpenFont("resources/fonts/arial.ttf", 48);
    TTF_Font* optionFont = TTF_OpenFont("resources/fonts/arial.ttf", 28);
    SDL_Color textColor = { 255, 255, 255, 255 };

    while (choosing) {
        SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
        SDL_RenderClear(renderer);

        SDL_Texture* winText = renderText("You Win!", font, textColor, renderer);
        SDL_Rect winRect = { 300, 100, 200, 60 };
        SDL_RenderCopy(renderer, winText, NULL, &winRect);
        SDL_DestroyTexture(winText);

        SDL_Texture* bestTimeText = renderText(bestTimeMsg.str(), optionFont, textColor, renderer);
        SDL_Rect bestTimeRect = { 300, 160, 200, 40 };
        SDL_RenderCopy(renderer, bestTimeText, NULL, &bestTimeRect);
        SDL_DestroyTexture(bestTimeText);

        std::vector<std::string> options = { "Escape", "Menu" };
        for (size_t i = 0; i < options.size(); i++) {
            SDL_Color optionColor = (i == selectedOption) ? SDL_Color{ 255, 255, 0, 255 } : textColor;
            SDL_Texture* optionText = renderText(options[i], optionFont, optionColor, renderer);
            SDL_Rect optionRect = { 300, 250 + (int)i * 50, 200, 40 };
            SDL_RenderCopy(renderer, optionText, NULL, &optionRect);
            SDL_DestroyTexture(optionText);
        }

        SDL_RenderPresent(renderer);

        while (SDL_PollEvent(&e)) {
            if (e.type == SDL_QUIT)
                return -1;
            if (e.type == SDL_KEYDOWN) {
                switch (e.key.keysym.sym) {
                case SDLK_UP:
                    selectedOption = (selectedOption - 1 + options.size()) % options.size();
                    break;
                case SDLK_DOWN:
                    selectedOption = (selectedOption + 1) % options.size();
                    break;
                case SDLK_RETURN:
                    if (selectedOption == 0)
                        return -1; // Tho√°t game
                    if (selectedOption == 1)
                        return -2; // Quay l·∫°i menu ch√≠nh
                }
            }
        }
        SDL_Delay(16);
    }
    return -1;
}

void Player::render(SDL_Renderer* renderer) {
    if (currentTexture) {
        SDL_Rect renderQuad = {rect.x, rect.y, rect.w, rect.h};
        // N·∫øu texture l√† textureSide v√† h∆∞·ªõng l√† ph·∫£i, v·∫Ω v·ªõi flip ngang
        if (currentTexture == textureSide && facingRight) {
            SDL_RenderCopyEx(renderer, currentTexture, NULL, &renderQuad, 0, NULL, SDL_FLIP_HORIZONTAL);
        } else {
            SDL_RenderCopy(renderer, currentTexture, NULL, &renderQuad);
        }
    } else {
        SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
        SDL_RenderFillRect(renderer, &rect);
    }
}

void Player::resetPosition(int x, int y) {
    rect.x = x;
    rect.y = y;
    savePosition("save.txt");
}

void Player::loadKeybinds() {
    std::ifstream file("settings.txt");
    if (file.is_open()) {
        std::string key;
        int value;
        while (file >> key >> value) {
            keybinds[key] = static_cast<SDL_Keycode>(value);
        }
        file.close();
    }

    if (keybinds.find("left") == keybinds.end()) keybinds["left"] = SDLK_LEFT;
    if (keybinds.find("right") == keybinds.end()) keybinds["right"] = SDLK_RIGHT;
    if (keybinds.find("up") == keybinds.end()) keybinds["up"] = SDLK_UP;
    if (keybinds.find("down") == keybinds.end()) keybinds["down"] = SDLK_DOWN;
}

bool Player::savePosition(const std::string& filename) {
    std::ofstream file(filename);
    if (!file.is_open()) {
        std::cerr << "‚ö†Ô∏è L·ªói: Kh√¥ng th·ªÉ l∆∞u v·ªã tr√≠ ng∆∞·ªùi ch∆°i!\n";
        return false;
    }
    file << rect.x << " " << rect.y;
    file.close();
    return true;
}

bool Player::loadPosition(const std::string& filename) {
    std::ifstream file(filename);
    if (!file.is_open()) return false;

    file >> rect.x >> rect.y;
    file.close();
    return true;
}

Player::~Player() {
    if (textureUp) {
        SDL_DestroyTexture(textureUp);
    }
    if (textureDown) {
        SDL_DestroyTexture(textureDown);
    }
    if (textureSide) {
        SDL_DestroyTexture(textureSide);
    }
}


void Player::loadTexture() {
    // Kh·ªüi t·∫°o c√°c con tr·ªè v·ªÅ nullptr
    textureUp = nullptr;
    textureDown = nullptr;
    textureSide = nullptr;
    currentTexture = nullptr;

    SDL_Surface* surface = IMG_Load("resources/images/player_up.png");
    if (!surface) {
        std::cerr << "‚ö†Ô∏è L·ªói: Kh√¥ng th·ªÉ t·∫£i ·∫£nh nh√¢n v·∫≠t (up)! " << IMG_GetError() << std::endl;
    } else {
        textureUp = SDL_CreateTextureFromSurface(renderer, surface);
        SDL_FreeSurface(surface);
        if (!textureUp) {
            std::cerr << "‚ö†Ô∏è L·ªói: Kh√¥ng th·ªÉ t·∫°o texture t·ª´ ·∫£nh (up)! " << SDL_GetError() << std::endl;
        }
    }

    surface = IMG_Load("resources/images/player_down.png");
    if (!surface) {
        std::cerr << "‚ö†Ô∏è L·ªói: Kh√¥ng th·ªÉ t·∫£i ·∫£nh nh√¢n v·∫≠t (down)! " << IMG_GetError() << std::endl;
    } else {
        textureDown = SDL_CreateTextureFromSurface(renderer, surface);
        SDL_FreeSurface(surface);
        if (!textureDown) {
            std::cerr << "‚ö†Ô∏è L·ªói: Kh√¥ng th·ªÉ t·∫°o texture t·ª´ ·∫£nh (down)! " << SDL_GetError() << std::endl;
        }
    }

    surface = IMG_Load("resources/images/player_side.png");
    if (!surface) {
        std::cerr << "‚ö†Ô∏è L·ªói: Kh√¥ng th·ªÉ t·∫£i ·∫£nh nh√¢n v·∫≠t (side)! " << IMG_GetError() << std::endl;
    } else {
        textureSide = SDL_CreateTextureFromSurface(renderer, surface);
        SDL_FreeSurface(surface);
        if (!textureSide) {
            std::cerr << "‚ö†Ô∏è L·ªói: Kh√¥ng th·ªÉ t·∫°o texture t·ª´ ·∫£nh (side)! " << SDL_GetError() << std::endl;
        }
    }
    
    // Ch·ªçn texture m·∫∑c ƒë·ªãnh (∆∞u ti√™n textureDown, sau ƒë√≥ textureUp, cu·ªëi c√πng textureSide)
    if (textureDown)
        currentTexture = textureDown;
    else if (textureUp)
        currentTexture = textureUp;
    else if (textureSide)
        currentTexture = textureSide;
    else
        std::cerr << "‚ö†Ô∏è L·ªói: Kh√¥ng c√≥ texture n√†o ƒë∆∞·ª£c load th√†nh c√¥ng!" << std::endl;
}

SDL_Texture* Player::renderText(const std::string &message, TTF_Font *font, SDL_Color color, SDL_Renderer *renderer) {
    SDL_Surface* surface = TTF_RenderText_Solid(font, message.c_str(), color);
    if (!surface) {
        std::cerr << "L·ªói khi t·∫°o Surface: " << TTF_GetError() << std::endl;
        return nullptr;
    }
    SDL_Texture* texture = SDL_CreateTextureFromSurface(renderer, surface);
    SDL_FreeSurface(surface);
    if (!texture) {
        std::cerr << "L·ªói khi t·∫°o Texture: " << SDL_GetError() << std::endl;
    }
    return texture;
}

int Player::getX() const { return rect.x + rect.w / 2; }
int Player::getY() const { return rect.y + rect.h / 2; }

void Player::collectKey() {
    keyCollected = true;
}

bool Player::hasKey() const {
    return keyCollected;
}

void Player::setPlayTime(Uint32 time) {
    playTime = time;
}

Uint32 Player::getPlayTime() const {
    return playTime;
}

SDL_Rect Player::getRect() const {
    return rect;
}

void Player::setKeybind(const std::string& action, SDL_Keycode keycode) {
    keybinds[action] = keycode;
}

void Player::updateNoKey(Maze& maze, SDL_Renderer* renderer)
{
    Uint32 currentTime = SDL_GetTicks();
    setPlayTime(currentTime - startTime);
}



